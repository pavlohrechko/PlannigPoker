package org.planning.rest_api;import com.google.cloud.functions.HttpFunction;import com.google.cloud.functions.HttpRequest;import com.google.cloud.functions.HttpResponse;import com.google.gson.Gson;import org.planning.datastore_api.TicketDAO;import org.planning.datastore_api.Ticket;import java.util.Set;import java.util.logging.Logger;public class TicketService implements HttpFunction {    private static final Logger logger = Logger.getLogger(MyHttpFunction.class.getName());    private final TicketDAO ticketDAO = new TicketDAO();    private final Gson gson = new Gson();    @Override    public void service(HttpRequest request, HttpResponse response) throws Exception {        // Get the HTTP method (GET, POST, DELETE)        String method = request.getMethod();        // Handle different HTTP methods        switch (method) {            case "GET":                handleGet(request, response);                break;            case "POST":                handlePost(request, response);                break;            case "DELETE":                handleDelete(request, response);                break;            default:                response.setStatusCode(405); // Method Not Allowed                response.getWriter().write("Method not allowed");        }    }    private void handleGet(HttpRequest request, HttpResponse response) throws Exception {        // Get the ticket ID from the query parameter        String ticketId = request.getFirstQueryParameter("id").orElse(null);        if (ticketId != null) {            // Get ticket by ID            Ticket ticket = ticketDAO.getTicketById(ticketId);            response.getWriter().write(gson.toJson(ticket));        } else {            // Get all tickets            Set<Ticket> tickets = ticketDAO.getAllTickets();            response.getWriter().write(gson.toJson(tickets));        }    }    private void handlePost(HttpRequest request, HttpResponse response) throws Exception {        // Parse the HTTP request body to extract ticket data        Ticket ticket = gson.fromJson(request.getReader(), Ticket.class);        // Create the ticket in the Firestore database        Ticket createdTicket = ticketDAO.createTicket(ticket);        // Send an HTTP response with the created ticket ID        response.getWriter().write("Ticket created successfully with ID: " + createdTicket.getTicketId());    }    private void handleDelete(HttpRequest request, HttpResponse response) throws Exception {        // Get the ticket ID from the query parameter        String ticketId = request.getFirstQueryParameter("id").orElse(null);        if (ticketId != null) {            // Delete the ticket by ID            ticketDAO.deleteTicket(ticketId);            response.getWriter().write("Ticket deleted successfully");        } else {            response.setStatusCode(400); // Bad Request            response.getWriter().write("Ticket ID is required for deletion");        }    }}