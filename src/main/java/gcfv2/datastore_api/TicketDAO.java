package gcfv2.datastore_api;import com.google.cloud.firestore.*;import com.google.api.core.ApiFuture;import gcfv2.rest_api.CreateTicketDTO;import java.time.LocalDate;import java.util.*;import java.util.concurrent.ExecutionException;public class TicketDAO {    Firestore db = Initializer.getDataBase("planningpoker-416220", "planningpoker");    public Ticket createTicket(CreateTicketDTO ticketDTO) {        Ticket ticket = new Ticket(                ticketDTO.getSubject(),                ticketDTO.getDescription(),                new Date(),                new Date()        );        CollectionReference ticketsCollection = db.collection("tickets");        DocumentReference newTicketRef = ticketsCollection.document();        ApiFuture<WriteResult> result = newTicketRef.set(ticket);        return ticket;    }    public void updateTicket(String ticketId, Ticket updatedTicket) {        DocumentReference docRef = db.collection("tickets").document(ticketId);        Map<String, Object> updatedData = new HashMap<>();        updatedData.put("subject", updatedTicket.getSubject());        updatedData.put("description", updatedTicket.getDescription());        updatedData.put("creationDate", updatedTicket.getCreationDate());        updatedData.put("updateDate", updatedTicket.getUpdateDate());        ApiFuture<WriteResult> result = docRef.update(updatedData);        try {            result.get();            System.out.println("Ticket updated successfully.");        } catch (InterruptedException | ExecutionException e) {            System.err.println("Error updating ticket: " + e.getMessage());        }    }    public Set<Ticket> getAllTickets() {        Set<Ticket> tickets = new HashSet<>();        try {            ApiFuture<QuerySnapshot> query = db.collection("tickets").get();            QuerySnapshot querySnapshot = query.get();            List<QueryDocumentSnapshot> documents = querySnapshot.getDocuments();            for (QueryDocumentSnapshot document : documents) {                Ticket ticket = document.toObject(Ticket.class);                ticket.setTicketId(document.getId());                tickets.add(ticket);            }        } catch (InterruptedException | ExecutionException e) {            System.err.println("Error getting documents: " + e.getMessage());        }        return tickets;    }        public Ticket getTicketById(String ticketId) {        DocumentReference docRef = db.collection("tickets").document(ticketId);        try {            ApiFuture<DocumentSnapshot> future = docRef.get();            DocumentSnapshot document = future.get();            if (document.exists()) {                return document.toObject(Ticket.class);            } else {                System.out.println("No such document!");                return null;            }        } catch (InterruptedException | ExecutionException e) {            System.err.println("Error getting document: " + e.getMessage());            return null;        }    }    public void deleteTicket(String ticketId) {        DocumentReference docRef = db.collection("tickets").document(ticketId);        ApiFuture<WriteResult> result = docRef.delete();        try {            result.get();            System.out.println("Ticket deleted successfully.");        } catch (InterruptedException | ExecutionException e) {            System.err.println("Error deleting ticket: " + e.getMessage());        }    }    public static void main (String[] args) throws ExecutionException, InterruptedException {        TicketDAO ticketService = new TicketDAO();        ticketService.deleteTicket("A2cqjq1mNoqs4TJ9RIoa");    }}